{
  "name": "parted",
  "description": "A streaming body parser",
  "author": {
    "name": "Christopher Jeffrey"
  },
  "version": "0.0.8",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/chjj/parted.git"
  },
  "keywords": [
    "multipart",
    "parser",
    "http",
    "express",
    "middleware"
  ],
  "dependencies": {
    "qs": "*"
  },
  "readme": "# parted\n\nParted is a streaming multipart, json, and urlencoded parser for node.js,\nwritten from scratch. It comes bundled with an express middleware which\nwill use the necessary parser depending on the request mime type. Each parser\nis also lazily loaded, so there is no unnecessary memory usage if you only need\none of them.\n\nThe middleware will leave you with a `req.body` object, similar to the default\nbody parser included in express. If a file was included with a multipart\nrequest, a temporary path to the uploaded file is provided in `req.body`.\n\nParted now tries to use [qs](https://github.com/visionmedia/node-querystring) as\nan optional dependency, but it can function without it. Using `qs` makes it a\nproper replacement for the connect/express body parser, as it can parse nested\nquerystrings.\n\n## Install\n\n``` bash\n$ npm install parted\n```\n\n## As a middleware\n\n``` js\nvar parted = require('parted');\n\napp.use(parted({\n  // custom file path\n  path: __dirname + '/uploads',\n  // memory usage limit per request\n  limit: 30 * 1024,\n  // disk usage limit per request\n  diskLimit: 30 * 1024 * 1024,\n  // allow multiple parts of the same name,\n  // then available as an array\n  multiple: true\n}));\n```\n\nWhen `multiple` is disabled only a single part will be present\nfor a given name, for example:\n\n```js\n{ image: '/tmp/bigred.1319577761529.png' }\n```\n\nHowever when `multiple` is enabled, this _may_ be an array:\n\n```js\n{ images:\n   [ '/tmp/bigred-pau.1319577761529.png',\n     '/tmp/bigred-ico.1319577761528.png',\n     '/tmp/bigred-rec.1319577761529.png',\n     '/tmp/bigred-sto.1319577761529.png',\n     '/tmp/bigred.1319577761529.png' ] }\n```\n\n## Usage\n\n### The multipart parser alone\n\n``` js\nvar multipart = require('parted').multipart;\n\nvar options = {\n  limit: 30 * 1024,\n  diskLimit: 30 * 1024 * 1024\n};\n\nvar parser = new multipart(type, options)\n  , parts = {};\n\nparser.on('error', function(err) {\n  req.destroy();\n  next(err);\n});\n\nparser.on('part', function(field, part) {\n  // temporary path or string\n  parts[field] = part;\n});\n\nparser.on('data', function() {\n  console.log('%d bytes written.', this.written);\n});\n\nparser.on('end', function() {\n  console.log(parts);\n});\n\nreq.pipe(parser);\n```\n\n## Running tests\n\n    $ node test\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chjj/parted/issues"
  },
  "_id": "parted@0.0.8",
  "_from": "parted@=0.0.8"
}
