{
  "name": "bogart",
  "description": "Fast JSGI web framework taking inspiration from Sinatra",
  "version": "0.4.2",
  "keywords": [
    "bogart",
    "framework",
    "sinatra",
    "REST"
  ],
  "author": {
    "name": "Nathan Stott",
    "email": "nrstott@gmail.com"
  },
  "email": "nathan.stott@whiteboard-it.com",
  "homepage": "https://github.com/nrstott/bogart",
  "main": "./lib/bogart",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nrstott/bogart"
  },
  "bugs": {
    "url": "https://github.com/nrstott/bogart/issues",
    "email": "nrstott@gmail.com"
  },
  "dependencies": {
    "q": "0.8.12",
    "jsgi": ">=v0.2.2",
    "mustache": "0.7.2",
    "underscore": ">=1.4.4",
    "node-uuid": ">=1.2.0",
    "parted": "=0.0.8",
    "oauth": "=0.9.5",
    "request": "=2.2.9",
    "commander": "*",
    "mkdirp": "*",
    "async": "0.1.22",
    "sinon": "1.5.2"
  },
  "devDependencies": {
    "haml": ">=0.4.2",
    "jade": ">=0.15.4",
    "tap": "*"
  },
  "scripts": {
    "test": "tap ./test/middleware.test.js ./test/response-builder.test.js ./test/response-helpers.test.js ./test/router.test.js ./test/stream.test.js ./test/util.test.js ./test/view.test.js ./test/app.test.js ./test/request.test.js"
  },
  "readme": "[![build status](https://secure.travis-ci.org/nrstott/bogart.png)](http://travis-ci.org/nrstott/bogart)\r\n# Bogart\r\n\r\nA blazing fast rapid application development web framework using JSGI for [node](http://nodejs.org/).\r\n\r\n## Getting Started\r\n\r\nBogart can be installed via [npm](https://github.com/isaacs/npm).\r\n\r\n    npm install bogart\r\n\r\nAlternatively, clone the git repository.\r\n\r\n    git clone git://github.com/nrstott/bogart.git\r\n\r\n## Hello World in Bogart\r\n\r\nMake a directory: `mkdir hello-world`\r\n\r\nCreate the following file:\r\n\r\n### app.js\r\n\r\n```javascript\r\nvar bogart = require('bogart');\r\n\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) { \r\n  return \"hello world\"; \r\n});\r\n\r\nrouter.get('/:name', function(req) {\r\n  return 'hello '+req.params.name;\r\n});\r\n\r\nvar app = bogart.app();\r\napp.use(bogart.batteries); // A batteries included JSGI stack including streaming request body parsing, session, flash, and much more.\r\napp.use(router); // Our router\r\n\r\napp.start();\r\n```\r\n\r\nStart your app: `node app.js`\r\n\r\nVisit it in a web browser at [http://localhost:8080](http://localhost:8080).\r\nVisit the route that says hello to you by name at [http://localhost:8080/bob](http://localhost:8080/bob)\r\n\r\n## Changing the port\r\n\r\nIf you can't run on 8080, change the `app.start` call e.g. `app.start(9090, '127.0.0.1')`\r\n\r\n## Routing\r\n\r\nRouting in Bogart is simple and intuitive.  A route is an HTTP method paired with an\r\nURL matching pattern and a handler function.\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n  return bogart.html('Hello World');\r\n});\r\n```\r\n\r\nRoutes are tested for matches in the order in which they are defined.\r\n\r\n### Route Patterns\r\n\r\nRoute patterns are matched against URLs.  They may include named parameters that will\r\nbe accessible via the `params` object of the `req` object passed to the route handler.\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/hello/:name', function(req) {\r\n  var greeting = 'Hello '+req.params.name;\r\n  return bogart.html(greeting);\r\n});\r\n```\r\n\r\nRoute patterns support wildcards. Wildcards will match anything whereas regular named parameters\r\nwill not match beyond a path separator (\"/\").\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/hello/*', function(req, name) {\r\n    return bogart.html('Hello '+req.params.splat[0]);\r\n});\r\n```\r\n\r\n### Regex Routes\r\n\r\nWhen a route pattern is not powerful enough, regular expressions may be used to specify which\r\nURLs are to be matched.\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get(/\\/posts?/, function(req) {\r\n  // Matches 'post' or 'posts'\r\n  return bogart.html('Regex Route');\r\n});\r\n```\r\n\r\nParameters are via regular expression groups in regular expression routes.  The parameter values\r\nare put in an `Array` in `req.params.splat` of the `req` object passed to the route handler.\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get(/hello-(.*)/, function(req) {\r\n  var name = req.params.splat[0];\r\n  return bogart.html('Hello '+name);\r\n});\r\n```\r\n\r\n## Bogart Application\r\n\r\n`bogart.app` makes it easy to setup a middleware chain and start coding. Combined with\r\n`bogart.batteries` (See Below), you can setup a full-stack JSGI application in two lines of code.\r\n\r\n```javascript\r\nvar app = bogart.app();\r\napp.use(bogart.batteries);\r\n```\r\n\r\nAfter adding `bogart.batteries`, you will normally want to add a Router. This is also done\r\nwith `app.use`. To start the application, use the `start` method.\r\n\r\n```javascript\r\nvar app = bogart.app();\r\napp.use(bogart.batteries);\r\n\r\nvar router = bogart.router();\r\n// NOTE: Here you would normally add some routes.\r\n\r\napp.use(router);\r\napp.start();\r\n```\r\n\r\n## Response Helpers\r\n\r\nBogart includes helpers for creating JSGI Responses. The helpers, by convention, take a final\r\nparameter of an options object that allows the caller to override defaults. The options object\r\nis merged with the default JSGI Response values of the helper before the JSGI Response is returned.\r\n\r\n### Respond with JSON\r\n\r\nHelper to create an HTTP 200 Success response with a Content-Type of application/json.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n  return bogart.json({ framework: 'Bogart' });\r\n});\r\n```\r\n\r\nThis route yields the following JSGI Response:\r\n\r\n```\r\n{\r\n  status: 200,\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: [ '{ \"framework\": \"Bogart\" }' ]\r\n}\r\n```\r\n\r\n### Redirect\r\n\r\nHelper to create an HTTP 302 Temporary Redirect response.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n  return bogart.redirect('/some/other/url');\r\n});\r\n```\r\n\r\nThis route yields the following JSGI Response:\r\n\r\n```\r\n{\r\n  status: 302,\r\n  headers: { 'Location': '/some/other/url' },\r\n  body: []\r\n}\r\n```\r\n\r\n### Error\r\n\r\nHelper to create an HTTP 500 Internal Server Error response.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n  return bogart.error('<html>...</html>');\r\n});\r\n```\r\n\r\nThis route yields the following JSGI Response:\r\n\r\n```\r\n{\r\n  status: 500,\r\n  headers: { 'Content-Type': 'text/html' },\r\n  body: [ '<html>...</html>' ]\r\n}\r\n```\r\n\r\n### Not Modified\r\n\r\nHelper to create an HTTP 304 Not Modified response.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n  return bogart.notModified();\r\n});\r\n```\r\n\r\nThis route yields the following JSGI Response:\r\n\r\n```\r\n{\r\n  status: 304,\r\n  headers: {},\r\n  body: []\r\n}\r\n```\r\n\r\n### File (Streaming!)\r\n\r\nHelper to create an HTTP 200 Success response with a body streamed from the contents of a file. The\r\nContent-Type of the response is determined by the mime type of the file.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar path = require('path');\r\n\r\nvar router = bogart.router();\r\nrouter.get('/download/*', function(req) {\r\n  var filePath = path.join(__dirname, 'public', req.params.splat[0]);\r\n\r\n  return bogart.file(filePath);\r\n});\r\n```\r\n\r\nThis route yields the following JSGI Response:\r\n\r\n```\r\n{\r\n  status: 200,\r\n  headers: { 'Content-Type': '<mimetype of the file>' },\r\n  body: fileStream // <-- A file stream\r\n}\r\n```\r\n\r\n### Proxy (Streaming!)\r\n\r\nHelper to create a response that proxies the response from a URL.\r\n\r\nSample Route:\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/google', function(req) {\r\n  return bogart.proxy('http://www.google.com');\r\n});\r\n```\r\n\r\nThis route yields a JSGI Response that matches the response from the proxied URL.\r\n\r\n## Imperative Response Builder\r\n\r\nBogart includes the `ResponseBuilder` helper to provide an imperative interface. While not\r\nrecommended as a goto style of programming in Bogart, there are times when buiding a\r\nresponse imperatively makes for cleaner, better code. This is true especially\r\nwhen working with callback based functions that cannot be wrapped by `bogart.promisify`.\r\n\r\n```javascript\r\nvar router = bogart.router();\r\nrouter.get('/', function(req) {\r\n\r\n  // Get a ResponseBuilder\r\n  var res = bogart.res();\r\n\r\n  doSomethingAsync(function(err, messageStr) {\r\n    res.setHeader('Content-Type', 'text/plain');\r\n\r\n    if (err) {\r\n      res.status(500);\r\n      res.send('Error');\r\n      return res.end(); // We use return to break out of the function, do not want to continue executing after res.end()\r\n    }\r\n\r\n    res.status(200);\r\n    res.send(messageStr);\r\n    res.end(); // End the Response.  This is analagous to resolving a promise for a JSGI Response.\r\n  });\r\n\r\n  return res;\r\n});\r\n```\r\n\r\n## Using Session\r\n\r\nThe session middleware can be included individually with `app.use(bogart.middleware.session)` or\r\nby using batteries `app.use(bogart.batteries)` which includes a default stack of JSGI middleware.\r\n\r\nA `session` function will be available on the request object passed to your route handlers. This\r\nfunction follows the jQuery style of arity determining if it is getting or setting a key/value pair.\r\nA call to session with one argument is a get to the value of the key referenced by the argument.\r\n\r\n```javascript\r\nreq.session('name'); // => value associated with 'name'\r\n```\r\n\r\nA call to session with two arguments is a set.\r\n\r\n```javascript\r\nreq.session('name', 'Nathan'); // sets the value of 'name' to 'Nathan'\r\n```\r\n\r\n### Contrived Example\r\n\r\nA set of two routes that use session:\r\n\r\n```javascript\r\nrouter.get('/:name', function(req) {\r\n  req.session('name', req.params.name);\r\n  return bogart.redirect('/');\r\n});\r\n\r\nrouter.get('/', function(req) {\r\n  return bogart.html('Hello ' +req.session('name'));\r\n});\r\n```\r\n\r\nVisiting '/:name' ('/Nathan', '/Bob', etc...) will set a session key that will be displayed by the root\r\nroute '/', after the redirect.\r\n\r\n## Running the Examples\r\n\r\nIn the 'examples' directory of the cloned source, there are several examples of bogart applications.\r\n\r\n### Hello World\r\n\r\nThe hello world example demonstrates a basic bogart applications.  The application has a route, '/:name', that takes a name\r\nas a parameter in the request URL.  The application responds with 'hello <name>'.  It also has a route, '/', that responds with `hello world`.\r\n\r\n    > cd examples\r\n    > node hello-world.js\r\n\r\nVisit the application in your web browser at [http://localhost:8080/Jim](http://localhost:8080/Jim)\r\n\r\n### Mustache Template with Layout\r\n\r\nThis example demonstrates usage of the mustache templating engine and a mustache layout.  A layout is a page designed\r\nto hold other templates to avoid duplication of content.\r\n\r\n    > cd examples/mustache-layout\r\n    > node app.js\r\n\r\nVisit the application in a web browser at [http://localhost:8080/](http://localhost:8080)\r\n\r\n### Jade\r\n\r\nIf you would like to use Jade instead of Mustache, please `npm install bogart-jade`. Then in\r\nyour application add `require('bogart-jade')` and the Jade ViewEngine will be available via\r\n`bogart.viewEngine('jade')`. See [the github repository](https://github.com/nrstott/bogart-jade) for more information.\r\n\r\n## Middleware\r\nBogart comes with a variety of JSGI middleware appliances. The `batteries` appliance includes a recommended JSGI application chain for\r\nnormal usage.\r\n\r\n#### Batteries\r\nFrameworks are better when they come batteries included. Bogart ships with the batteries, it's just up to you to put them in if you\r\nwant to use them.\r\n\r\nThe batteries middleware creates the following JSGI chain where `nextApp` is the JSGI appliance passed as the first parameter\r\nto `batteries`:\r\n\r\n    error -> validateResponse -> directory -> parted -> methodOverride\r\n          -> session -> flash -> bodyAdapter -> stringReturnAdapter -> nextApp\r\n\r\nThe binary middleware is configured to check the path of the request and if it corresponds to a potential directory in the 'public' directory,\r\nthe request is routed to the `directory` middleware to serve a static file.\r\n\r\n#### Binary Split\r\nChoose between two JSGI appliances based upon the request.\r\n\r\n#### Serve Static Files\r\nThe static example demonstrates using bogarts *Directory* middleware to serve an image.\r\n\r\n    > cd examples/static-server\r\n    > node app.js\r\n\r\nVisit the application in a web browser at [http://localhost:8080/](http://localhost:8080).\r\nYou should see the image.\r\n\r\n#### Error\r\nTranslates rejected promises to a JSGI error response.\r\n\r\n#### Flash\r\nProvides Ruby-esque 'flash' variables, good only for the next request cycle. Flash session tracking and flash data is stored via encrypted cookies by default. These providers can be overriden with the Flash middleware options. An example flash data provider implementation with a Redis backend is available here: [https://github.com/jdc0589/bogart-flash-redis](https://github.com/jdc0589/bogart-flash-redis)\r\n\r\n#### MethodOverride\r\nChecks for the _method parameter or X-HTTP-METHOD-OVERRIDE header to override the HTTP method.\r\n\r\n#### ParseJson\r\nParses the body of any request with an \"application/json\" content-type. The value of request body is reassigned with the parsed value.\r\nUse the Parted middleware instead unless you have a specific reason not to as it contains a superset of this functionality and also performs streaming parsing.\r\n\r\n#### ParseForm\r\nParses the body of any request with an \"application/x-www-form-urlencoded\" content-type. The value of request body is reassigned with the parsed value.\r\nUse the Parted middleware instead unless you have a specific reason not to as it contains a superset of this functionality and also performs streaming parsing.\r\n\r\n#### Parted\r\nA JSGI wrapper around the excellent [Parted](https://github.com/chjj/parted) middleware for Connect.\r\nParted is a streaming multipart, json, and urlencoded parser.\r\n\r\n#### Session\r\nStandard flash middleware for bogart. Session id and data are stored in encrypted cookies by default, however this can be overridden with custom storage providers. A redis backed session data store is available here: [https://github.com/jdc0589/bogart-session-redis](https://github.com/jdc0589/bogart-session-redis)\r\n\r\n## Design Philosophy\r\n\r\n* Public APIs should be terse. Prefer `bogart.app()` to `new bogart.Application()`.\r\n* Be verbose when it does not increase typing for the API user.\r\n  A good example of this would be in naming of function parameters. The parameter\r\n  name does not affect the user of the API, so making it more verbose makes for\r\n  better self-documenting code.\r\n* Use [promises](http://wiki.commonjs.org/wiki/Promises) when the contract fits. Never use an EventEmitter that should only\r\n  be attached to in a specific scope and will only call a success and/or error callback\r\n  one time.\r\n* Use [EventEmitter](http://nodejs.org/docs/latest/api/events.html#events.EventEmitter) for signals that can fire any number of times.\r\n* Prefer composition to inheritance.\r\n* Avoid manipulating prototypes of Node.JS constructors. Manipulating prototypes makes for harder to understand code.\r\n  Also, Bogart is expected to be cross-platform in the future.\r\n\r\n## Promises\r\n\r\nPromises provide a well-defined interface for interacting with an object that represents the result of an action that is performed\r\nasynchronously. Why does Bogart use Promises instead of Callbacks for an interface? Because it's prettier and easier to reason about!\r\n\r\nIn all seriousness, I don't want to get into large arguments about the merits of Promises. Node.JS uses callbacks for its API; however,\r\nuser-land applications and frameworks are free to employ higher-level abstractions and Bogart uses Promises.\r\n\r\n### Terminology\r\n\r\n* Listener: A function listening for the resolution or rejection of a Promise.\r\n* Resolve: A successful Promise is 'resolved' which invokes the success listeners that are waiting and remembers the value that was resolved for future success listeners that are attached.\r\n* Reject: When an error condition is encountered, a Promise is 'rejected' which invokes the error listeners that are waiting and remembers the value that was rejected for future error listeners that are attached.\r\n* Callback: A function executed upon successful resolution of a Promise.\r\n* Errback: A function executed when a Promise is rejected\r\n* Progressback: A function executed to provide intermediate results of a Promise.\r\n\r\n### How Promises Work\r\n\r\nPromises may only be resolved one time. In the future, when success listeners are added to a\r\npromise that has already been resolved, the success listener will be invoked with the\r\npreviously resolved value. Each success listener or error listener is invoked one time and\r\none time only.\r\n\r\nPromises are not EventEmitters. Many times when describing promises, other coders ask why\r\nnot just use an EventEmitter. Promises have a different contract. The fact that promises\r\nare resolved or rejected only one time is powerful. EventEmitters have their place; however,\r\nthey do not take the place of Promises and Promises do not take the place of EventEmitters.\r\n\r\n```javascript\r\nfunction helloWorld() {\r\n  // Retrieve the q promise utility\r\n  var q = require('bogart').q;\r\n\r\n  // Create a deferred, a wrapper around a Promise.\r\n  var deferred = q.defer();\r\n\r\n  // Do something async\r\n  setTimeout(function() {\r\n    // Resolve the promise, this will cause success listeners to be invoked.\r\n    deferred.resolve('hello world');\r\n  }, 100);\r\n\r\n  // Return the promise that the deferred wraps to the client.\r\n  return deferred.promise;\r\n}\r\n\r\n// Consuming the helloWorld function\r\nvar p = helloWorld();\r\np.then(function(msg) {\r\n  // This function will be invoked on success\r\n  console.log(msg);\r\n}, function(err) {\r\n  // This function will be invoked on error.\r\n  console.log(err);\r\n});\r\n```\r\n\r\n### The `then` Method\r\n\r\n```javascript\r\npromise.then(callback, errback, progress)\r\n```\r\n\r\nA promise will have a `then` method which takes up to three parameters. The three parameters are all optional.\r\nThe first parameter, `callback`, is executed if the Promise is successfully resolved. The second parameter, `errback`, is\r\nexecuted if the Promise is rejected. The third parameter, `progress`, is used to provide intermediate feedback on the\r\nasynchronous operation. This parameter is rarely used. Most promises do not report progress.\r\n\r\n### The `when` Function\r\n\r\n```javascript\r\nbogart.q.when(promiseOrValue, callback, errback, progress)\r\n```\r\n\r\nThe `when` function in the `bogart.q` namespace is helpful when you do not know if what you have is a value or a promise for a\r\nvalue. The callback will be executed for success for a resoled promise or for the value passed if it is a value and not a promise.\r\n\r\n```javascript\r\n// The following two lines are equivalent with the exception that the `when` can \r\n// handle values that are not promises.\r\nq.when(p, function() { console.log('Success'); });\r\np.then(function() { console.log('Success'); });\r\n```\r\n\r\n### Bubbling\r\n\r\nPromises can be 'bubbled'. The return value of a callback becomes the value of an external promise. The same is true of errbacks.\r\n\r\n```javascript\r\nfunction bubble(p) {\r\n  return p.then(function() {\r\n    // Assume makePromise is a function that returns a promise for an asyncronous operation.\r\n    // The value of makePromise when resolved becomes the resolution of the `bubble` function as well.\r\n    return makePromise();\r\n  });\r\n}\r\n```\r\n\r\nBubbling errbacks is parallel to having a try/catch at a higher level handle errors at a lower level.\r\n\r\n```javascript\r\np.then(function(url) {\r\n  return request(url).then(function() {\r\n    throw 'error';\r\n  });\r\n}, function(err) {\r\n  // Will handle the error that occurs in the callback of `request.then`.\r\n  console.log(err);\r\n});\r\n```\r\n\r\n### Working with Node.JS Callbacks\r\n\r\nNode.JS uses a style of callback with the following signuare: `function(err, result)`. Bogart includes a utility function,\r\n`bogart.promisify`, to adapt these Node.JS-style functions to return a Promise.\r\n\r\n```javascript\r\nvar fs = require('fs'); // Node File System Module\r\nvar bogart = require('bogart'); // Include Bogart\r\n\r\n// A promise-based version of fs.readFile.\r\nvar readFile = bogart.promisify(fs.readFile);\r\n\r\nreadFile('test.txt').then(function(data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n*NOTE*: A Node.JS-style function which calls its callback multiple times is not compatible with promises.\r\nA Promise may be resolved only once. Node.JS style functions that call their callback multiple times are\r\nuncommon. The vast majority of Node.JS style functions can be safely translated using `bogart.promisify`.\r\n\r\n### Promises are 'A Good Thing'\r\n\r\nThere are a lot of critiques of Promises. These usually come from programmers who have not used a proper Promise library.\r\nTurst me, promises are 'A Good Thing'. Your code will be more composable, readable, and maintainable if you choose to use\r\nPromises instead of Callbacks for your API. It is also quite easy to transalate Node.JS style callbacks into promises using\r\n`bogart.promisify` so working wtih callback based APIs is still simple.\r\n\r\n## JSGI\r\n\r\nJSGI stands for JavaScript Gateway Interface. It is an interface between web applications and web servers. It is similar to\r\nRuby's Rack and Python's WSGI.\r\n\r\n### Entities\r\n\r\n* Application: A JavaScript Function that takes one argument, the Request as a JavaScript Object, and returns its Response as a JavaScript Object containing three required attributes: status, headers, and body.\r\n* Middleware: JSGI Applications that can call other JSGI Applications. Middleware can be organized into a call chain to provide useful services or perform useful business logic.\r\n* Request: A JavaScript Object that contains the state of the HTTP request.  JSGI Applications and Middleware are free to modify the request object.\r\n\r\n### Bogart Relationship to JSGI\r\n\r\nBogart makes it easy to create JSGI Applications and Middleware. Bogart is a high-level wrapper around JSGI.\r\n\r\nValid JSGI responses are always valid returns from Bogart. Bogart, via its helpful Middleware, also allows you to return\r\nNode.JS Streams, Node.JS Buffers, and JavaScript Strings as responses that will be translated into valid JSGI responses.\r\n\r\nBogart also provides helper functions to make creating JSGI responses easier. Prime examples of this are `bogart.file` which\r\nreturns a JSGI response that serves a file and `bogart.proxy` which returns a response that proxies another URL.\r\n\r\n## Supporting Modules\r\n\r\n* [Jade View Engine](https://github.com/nrstott/bogart-jade): `npm install bogart-jade`\r\n\r\n## Contributors\r\n\r\n* [Nathan Stott](https://github.com/nrstott)\r\n* [Nick Fitzgerald](https://github.com/fitzgen)\r\n* [Martin Murphy](https://github.com/soitgoes)\r\n* [Davis Clark](https://github.com/jdc0589)\r\n* [Aaron Shafovaloff](https://github.com/aaronshaf)\r\n* [Lewis Patterson](https://github.com/lpatters)\r\n\r\n## License\r\n\r\nCopyright (c) 2009 Nathan Stott <[nathan.whiteboard-it.com](http://nathan.whiteboard-it.com/)\\>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to\r\ndeal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\nsell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "_id": "bogart@0.4.2",
  "_from": "bogart@>0.0.0"
}
