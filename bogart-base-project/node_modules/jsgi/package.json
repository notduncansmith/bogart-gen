{
  "name": "jsgi",
  "version": "0.2.4ssl",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/jsgi-node",
  "author": {
    "name": "Kris Zyp"
  },
  "readme": "# JSGI 0.3 Adapter for Node\n\nJSGI-Node provides an interface for running middleware [JSGI](http://wiki.commonjs.org/wiki/JSGI/Level0/A/Draft2) on Node.\nJSGI is an asynchronous middleware interface based on solid mature middleware design\nprinciples, and the asynchronous design fits perfectly with Node. JSGI uses idiomatic JavaScript,\nleveraging closures for [simple and fast](http://www.sitepen.com/blog/2010/06/11/jsgi-vs-connect-for-node-middleware/) middleware connectivity.\nThere is substantial set of middleware components that can be found on the \n[Node modules page](https://github.com/ry/node/wiki/modules#middleware).\n\nTo use, provide a JSGI application (can be application stack) to the start \nfunction:\n\n    require(\"jsgi-node\").start(function(request){\n      return request.body.join().then(function(requestBody){\n        return {\n          status:200,\n          headers:{},\n          body:[\"echo: \" + requestBody]\n        };\n      });\n    });\n\nThis adapter should conform to the JSGI 0.3 (with promises) for full \nasynchronous support. For example:\n\n    var fs = require(\"promised-io/fs\");\n    require(\"jsgi-node\").start(function(request){\n      return fs.readFile(\"jsgi-node.js\").then(function(body){\n        return {\n          status: 200,\n          headers: {},\n          body: [body]\n        };\n      });\n    });\n\n\nFile objects returned from [promised-io's fs](http://github.com/kriszyp/promised-io) can be directly provided as body for \nautomated streaming of data to the client from the filesystem:\n\n    var fs = require(\"promised-io/fs\");\n    require(\"jsgi-node\").start(function(request){\n      return {\n        status: 200,\n        headers: {},\n        body: fs.open(\"some-file.txt\",\"r\")\n      };\n    });\n\nThis package also includes an adapter for running Node HTTP apps on top of JSGI middleware:\n\n    var fs = require(\"promised-io/fs\"),\n        Node = require(\"jsgi/node\").Node;\n    require(\"jsgi-node\").start(\n      SomeJSGIMiddleWare(\n        OtherJSGIMiddleWare(\n          Node(function(request, response){\n           // request and response conform to Node's HTTP API\n          })\n        )\n      )\n    );\n\n## WebSocket with JSGI\nJSGI middleware can be used to handle incoming WebSocket messages. While JSGI\nis designed for HTTP, WebSocket includes HTTP elements and JSGI's streaming capabilities\nare well-suited for socket communication. JSGI delegation can be achieved by using\nthe \"ws-jsgi\" module in conjunction with the node-websocket-server package. \nThis \"ws-jsgi\" module exports a function that can be called with a socket server and\na JSGI handler. For example:\n<pre>\n\tvar http = require(\"http\").createServer(\n\t\t\trequire(\"jsgi-node\").Listener(jsgiApp)\n\t\t);\n\thttp.listen(80);\n\trequire(\"jsgi-node/ws-jsgi\")(ws.createServer({\n\t\tserver: http\n\t}), jsgiApp);\n</pre>\n\nJSGI-Node is licensed under the AFL or BSD license.\n\nAuthors include Kris Zyp and Jed Schmidt. ",
  "readmeFilename": "README.md",
  "description": "JSGI-Node provides an interface for running middleware [JSGI](http://wiki.commonjs.org/wiki/JSGI/Level0/A/Draft2) on Node. JSGI is an asynchronous middleware interface based on solid mature middleware design principles, and the asynchronous design fits perfectly with Node. JSGI uses idiomatic JavaScript, leveraging closures for [simple and fast](http://www.sitepen.com/blog/2010/06/11/jsgi-vs-connect-for-node-middleware/) middleware connectivity. There is substantial set of middleware components that can be found on the  [Node modules page](https://github.com/ry/node/wiki/modules#middleware).",
  "_id": "jsgi@0.2.4ssl",
  "_from": "jsgi@>=v0.2.2"
}
